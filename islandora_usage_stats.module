<?php

/**
 * @file
 * 
 */

/**
 * Implements hook_block_info().
 */
function islandora_usage_stats_block_info()
{
    $blocks['top_usage'] = array(
        'info' => t('Most Viewed Islandora Items'),
        'status' => TRUE,
        'region' => 'sidebar_first',
        'weight' => 0,
        'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    );
    
    $blocks['recent_activity'] = array(
        'info' => t('Recently accessed Islandora Items'),
        'status' => TRUE,
        'region' => 'sidebar_first',
        'weight' => 0,
        'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    );
    
    return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * @param unknown $delta            
 */
function islandora_usage_stats_block_configure($delta)
{
    $form = array();
    
    switch ($delta) {
        case 'top_usage':
            if (user_access('manage usage stats')) {
                $form['islandora_usage_stats_block_display_rows'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Configure Number of Rows to Display'),
                    '#size' => 5,
                    '#description' => t('Enter the number of rows to display in the block.'),
                    '#default_value' => variable_get('islandora_usage_stats_block_display_rows', 5)
                );
                
                $form['islandora_usage_stats_block_exclusion'] = array(
                    '#type' => 'fieldset',
                    '#title' => t('Omit PIDs from block display'),
                    '#description' => t('Add Islandora PIDs that you want to omit from being displayed in the block')
                );
                
                $form['islandora_usage_stats_block_exclusion']['islandora_usage_stats_exclusion_list'] = array(
                    '#type' => 'textarea',
                    '#description' => t('Add Islandora PIDs separated by spaces'),
                    '#default_value' => variable_get('islandora_usage_stats_block_exclusion_list', 'islandora:root')
                );
            }
            break;
        case 'recent_activity':
            if (user_access('manage usage stats')) {
                $form['islandora_usage_stats_recent_activity_block_display_rows'] = array(
                    '#type' => 'textfield',
                    '#title' => t('Configure Number of Rows to Display'),
                    '#size' => 5,
                    '#description' => t('Enter the number of rows to display in the block.'),
                    '#default_value' => variable_get('islandora_usage_stats_recent_activity_block_display_rows', 5)
                );
                
                $form['islandora_usage_stats_recent_activity_block_exclusion'] = array(
                    '#type' => 'fieldset',
                    '#title' => t('Omit PIDs from block display'),
                    '#description' => t('Add Islandora PIDs that you want to omit from being displayed in the block')
                );
                
                $form['islandora_usage_stats_recent_activity_block_exclusion']['islandora_usage_stats_recent_activity_block_exclusion_list'] = array(
                    '#type' => 'textarea',
                    '#description' => t('Add Islandora PIDs separated by spaces'),
                    '#default_value' => variable_get('islandora_usage_stats_recent_activity_block_exclusion_list', 'islandora:root')
                );
            }
            break;
    }
    
    return $form;
}

/**
 * Implements hook_block_save().
 *
 * @param string $delta            
 * @param unknown $edit            
 */
function islandora_usage_stats_block_save($delta = '', $edit = array())
{
    switch ($delta) {
        case 'top_usage':
            variable_set('islandora_usage_stats_block_display_rows', (int) $edit['islandora_usage_stats_block_display_rows']);
            variable_set('islandora_usage_stats_block_exclusion_list', $edit['islandora_usage_stats_exclusion_list']);
            break;
        case 'recent_activity':
            variable_set('islandora_usage_stats_recent_activity_block_display_rows', (int) $edit['islandora_usage_stats_recent_activity_block_display_rows']);
            variable_set('islandora_usage_stats_recent_activity_block_exclusion_list', $edit['islandora_usage_stats_recent_activity_block_exclusion_list']);
            break;
    }
    return;
}

/**
 * Implements hook_block_view().
 *
 * @param string $delta            
 */
function islandora_usage_stats_block_view($delta = '')
{
    switch ($delta) {
        case 'top_usage':
            $block['content'] = islandora_usage_stats_block_contents($delta);
            return $block;
            break;
        case 'recent_activity':
            $block['content'] = islandora_usage_stats_block_contents($delta);
            return $block;
            break;
    }
}

/**
 * Module-defined content generating function
 *
 * @param unknown $delta            
 */
function islandora_usage_stats_block_contents($delta)
{
    global $user;
    switch ($delta) {
        case 'top_usage':
            if (user_access('view usage stats block')) {
                $connection = islandora_get_tuque_connection($user);
                $repository = $connection->repository;
                
                $excludedPIDlist = explode(' ', variable_get('islandora_usage_stats_block_exclusion_list', 'islandora:root'));
                $excludeString = "('" . implode("','", $excludedPIDlist) . "')";
                
                // TODO: use a placeholder for this query to tighten up injection attacks
                // NB: tried using a placeholder but drupal wouldn't play nicely
                $nbr_rows = variable_get('islandora_usage_stats_block_display_rows', 5);
                $result = db_query_range("SELECT pid, views 
	                               FROM {islandora_usage_stats_object_views}
                                 WHERE pid not in $excludeString
    	                           ORDER BY views DESC", 0, $nbr_rows);
                $items = array();
                foreach ($result as $row) {
                    
                    $object = islandora_object_load($row->pid);
                    $view_suffix = ((int)$row->views > 1) ? 'views' : 'view';
                    $viewcount = "$row->views $view_suffix";
                    $items[] = array(
                        'data' => l($object->label, 'islandora/object/' . urlencode($row->pid)) . " <span class='label label-default'>". $viewcount . '</span>',
                        'class' => array(
                            'list-group-item'
                        )
                    );
                }
                return array(
                    '#markup' => theme('item_list', array(
                        'items' => $items,
                        'attributes' => array(
                            'class' => array(
                                'list-group'
                            )
                        )
                    ))
                );
            }
            break;
        case 'recent_activity':
            if (user_access('view usage stats block')) {
                $connection = islandora_get_tuque_connection($user);
                $repository = $connection->repository;
                
                $excludedPIDlist = explode(' ', variable_get('islandora_usage_stats_recent_activity_block_exclusion_list', 'islandora:root'));
                $excludeString = "('" . implode("','", $excludedPIDlist) . "')";
                
                // TODO: use a placeholder for this query to tighten up injection attacks
                // NB: tried using a placeholder but drupal wouldn't play nicely
                $nbr_rows = variable_get('islandora_usage_stats_recent_activity_block_display_rows', 5);
                
                $result = db_query_range("SELECT pid, max(time) as time
                    FROM {islandora_usage_stats_object_access_log}
                    WHERE pid not in $excludeString
                    group by pid
                    ORDER BY time desc", 0, $nbr_rows);
                
                $items = array();
                foreach ($result as $row) {
                    $object = islandora_object_load($row->pid);
                    $items[] = array(
                        'data' => l($object->label, 'islandora/object/' . urlencode($row->pid)),
                        'class' => array(
                            'list-group-item'
                        )
                    );
                }
                return array(
                    '#markup' => theme('item_list', array(
                        'items' => $items,
                        'attributes' => array(
                            'class' => array(
                                'list-group'
                            )
                        )
                    ))
                );
            }
            break;
    }
}



/**
 * Implementation of hook_menu().
 */
function islandora_usage_stats_menu()
{
    $items = array();
    
    /**
     * Internal route with 2 wildcard matches
     */
    $items['download_ds/%/%'] = array(
        'title' => 'Download datastream',
        'page callback' => 'islandora_usage_stats_download_ds_form',
        'page arguments' => array(
            1,
            2
        ),
        'access callback' => 'user_access',
        'access arguments' => array(
            'access content'
        ),
        'type' => MENU_CALLBACK
    );
    
    $items['admin/settings/islandora_usage_stats'] = array(
        'title' => 'Islandora Usage Stats settings',
        'description' => 'Change how usage stats behave.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array(
            'islandora_usage_stats_admin_settings'
        ),
        'access arguments' => array(
            'manage usage stats'
        ),
        'type' => MENU_CALLBACK,
        'file' => 'islandora_usage_stats.admin.inc'
    );
    
    return $items;
}

/**
 * Implementation of hook_permission
 * 
 * Sets the permissions required by this module
 * 
 */
function islandora_usage_stats_permission()
{
    return array(
        'manage usage stats' => array(
            'title' => t('Manage usage tracking'),
            'description' => t('Manage usage tracking for the Islandora Usage Stats module')
        ),
        'view usage stats block' => array(
            'title' => t('View usage tracking stats block'),
            'description' => t('View usage tracking stats block which includes number of views and downloads')
        )
    );
}

/**
 * Form called when paths with link 'download_ds/$pid/$dsid' are clicked
 */
function islandora_usage_stats_download_ds_form($pid, $dsid)
{
    global $base_url;
    
    $object = islandora_object_load($pid);
    
    // $url = $base_url . '/fedora/repository/' . $pid . '/' . $dsid . '/content';
    
    if (! $object) {
        drupal_set_message(t('Object could not be loaded from islandora!'));
        return;
    }
    
    $sanitized_label = preg_replace('/[^A-Za-z0-9_\-]|\.pdf$/', '_', $object->label);
    $download_url = 'islandora/object/' . $object->id . '/datastream/OBJ/download/' . $sanitized_label . '.pdf';
    
    $datastream = $object[$dsid];
    
    drupal_set_message($sanitized_label);
    
    if (! $datastream) {
        drupal_set_message(t('Could not get datastream, id: ' . $pid . ' , dsid: ' . $dsid));
        return;
    }
    
    $mime_type = $datastream->mimeType;
    
    if (! $mime_type) {
        drupal_set_message(t('Could not get mimetype'));
        return;
    }
    
    $extension = system_mime_type_extension($mime_type);
    
    $file = '';
    $file = $datastream->getContent($file);
    
    $ds_name = $datastream->id;
    
    // track the download
    $track = new IslandoraUsageStats($pid);
    $result = $track->addDownload($ds_name); // increase data stream tracking number by 1
    
    $object_array = array(
        'object' => $object,
        'label' => $sanitized_label,
        'download_url' => $download_url,
        'datastream' => $datastream,
        'ds_name' => $ds_name,
        'mime_type' => $mime_type,
        'extension' => $extension,
        'tracking' => $result
    );
    
    // create custom hook that other modules can implement
    module_invoke_all('islandora_datastream_download', $object_array);
    
    // redirect to the file or error
    if ($file) {
//         drupal_add_http_header('Content-type', 'application/x-unknown; utf-8');
        drupal_add_http_header('Content-type', $mime_type);
        drupal_add_http_header('Content-Disposition', 'attachment; filename' . $sanitized_label);
        echo $file;
        exit();
    } else {
        drupal_set_message(t('Specified file does not exist!'));
    }
}

/**
 * Implements HOOK_islandora_datastream_download
 *
 * @param array $object_array
 *            'object'
 *            'label'
 *            'download_url'
 *            'datastream'
 *            'ds_name'
 *            'mime_type'
 *            'extension'
 *            'tracking'
 */
function islandora_usage_stats_islandora_datastream_download($object_array)
{
    // drupal_set_message('Datastream with object id: ' . $object_array['object']->id . ' downloaded');
    drupal_set_message($object_array['mime_type']);
}

/**
 * Returns the system MIME type mapping of MIME types to extensions, as defined in /etc/mime.types
 * (considering the first extension listed to be canonical).
 */
function system_mime_type_extensions()
{
    $out = array();
    $file = fopen('/etc/mime.types', 'r');
    while (($line = fgets($file)) !== FALSE) {
        $line = trim(preg_replace('/#.*/', '', $line));
        if (! $line)
            continue;
        $parts = preg_split('/\s+/', $line);
        if (count($parts) == 1)
            continue;
        $type = array_shift($parts);
        if (! isset($out[$type]))
            $out[$type] = array_shift($parts);
    }
    fclose($file);
    return $out;
}

/**
 * Returns the canonical file extension for the MIME type specified, as defined in /etc/mime.types
 * (considering the first extension listed to be canonical).
 *
 * @param string $type
 *            - The MIME type
 * @return Ambigous <NULL, unknown>
 */
function system_mime_type_extension($type)
{
    static $exts;
    if (! isset($exts))
        $exts = system_mime_type_extensions();
    return isset($exts[$type]) ? $exts[$type] : NULL;
}

/**
 * Implements hook_islandora_object_purged
 * 
 * @param unknown $pid
 */
function islandora_usage_stats_islandora_object_purged($pid) {
    // remove from views table
    $viewsTable = 'islandora_usage_stats_object_views';
    islandora_usage_stats_delete_from_table($viewsTable, $pid);
    
    // remove from downloads table
    $downloadsTable = 'islandora_usage_stats_object_ds_downloads';
    islandora_usage_stats_delete_from_table($downloadsTable, $pid);
    
    // remove from object activity log
    $accessLog = 'islandora_usage_stats_object_access_log';
    islandora_usage_stats_delete_from_table($accessLog, $pid);
    
    // remove from object datastream download log
    $downloadLog = 'islandora_usage_stats_object_ds_access_log';
    islandora_usage_stats_delete_from_table($downloadLog, $pid);
}

/**
 * Copy of 'islandora_usage_stats_clear_tracking' method 
 * 
 * @param unknown $table
 * @param string $pid
 * @return string
 */
function islandora_usage_stats_delete_from_table($table, $pid = NULL)
{
    $result = '';
    if ($pid == NULL) {
        $result = db_truncate($table)->execute();
    }
    else {
        $result = db_delete($table)->condition('pid', $pid)->execute();
    }
    return $result;
}

/**
 * Implements hook_islandora_view_object to track usage stats
 *
 * @param unknown $object
 *            the islandora object          
 */
function islandora_usage_stats_islandora_view_object($object)
{
    $track = new IslandoraUsageStats($object->id);
    $track->plusOneView();
}

/**
 * Sets up tracking variables for the Islandora PDF module
 *
 * @param array $variables
 */
function islandora_usage_stats_preprocess_islandora_pdf(&$variables)
{
    $islandora_object = $variables['islandora_object'];
    $id = $islandora_object->id;
    $label = $islandora_object->label;
    
    $track = new IslandoraUsageStats($id);
    $variables['time_last_viewed'] = $track->getLastViewedTime();
    
    $currentStats = $track->getViewCount();
    $variables['times_viewed'] = $currentStats['views'];
    
    $downloaded = $track->getDownloads('OBJ');
    
    $variables['times_downloaded'] = $downloaded['downloads'];
    $variables['time_last_downloaded'] = $downloaded['time'];
    
    $variables['islandora_download_link'] = l('<i class="glyphicon glyphicon-download"> ' . t('Download PDF') . '</i>', 'download_ds/' . $id . '/OBJ/' . $label, array(
	    'attributes' => array(
            'class' => 'btn btn-primary'
        ),
        'html' => TRUE,
    ));
}

function islandora_usage_stats_preprocess_islandora_basic_collection(&$variables)
{
    $islandora_object = $variables['islandora_object'];
    $id = $islandora_object->id;
    $label = $islandora_object->label;

    $track = new IslandoraUsageStats($id);
    $variables['time_last_viewed'] = $track->getLastViewedTime();

    $currentStats = $track->getViewCount();
    $variables['times_viewed'] = $currentStats['views'];

    $downloaded = $track->getDownloads('OBJ');

    $variables['times_downloaded'] = $downloaded['downloads'];
    $variables['time_last_downloaded'] = $downloaded['time'];

    $variables['islandora_download_link'] = l('<i class="glyphicon glyphicon-download"> ' . t('Download PDF') . '</i>', 'download_ds/' . $id . '/OBJ/' . $label, array(
            'attributes' => array(
            'class' => 'btn btn-primary'
        ),
        'html' => TRUE,
    ));
}

